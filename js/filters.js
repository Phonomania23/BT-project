// filters.js ‚Äî –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤
(function() {
    console.log("‚úÖ filters.js loaded");

    const LS_PICKED = "selectedBloggers";
    let allBloggers = [];
    let selected = new Set();
    let currentFilters = {};

    // –£—Ç–∏–ª–∏—Ç—ã
    const $ = (sel) => document.querySelector(sel);
    const $$ = (sel) => document.querySelectorAll(sel);

    function readPicked() {
        try {
            return JSON.parse(localStorage.getItem(LS_PICKED) || '[]');
        } catch {
            return [];
        }
    }

    function writePicked(ids) {
        localStorage.setItem(LS_PICKED, JSON.stringify(ids));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async function loadBloggers() {
        try {
            console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ bloggers.json...");
            const response = await fetch('../json/bloggers.json');
            
            if (response.ok) {
                allBloggers = await response.json();
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allBloggers.length} –±–ª–æ–≥–µ—Ä–æ–≤`);
                return allBloggers;
            }
            
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å bloggers.json');
            
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
            // Fallback –¥–∞–Ω–Ω—ã–µ
            allBloggers = [
                {
                    id: "1",
                    name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                    platform: "YouTube",
                    category: "—Ç–µ—Ö–Ω–∏–∫–∞",
                    subscribers: 125000,
                    er: 4.5,
                    price: 2500,
                    email: "ivan@example.com",
                    avatar: "../images/avatars/placeholder.png"
                },
                {
                    id: "2", 
                    name: "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
                    platform: "Instagram",
                    category: "–∫—Ä–∞—Å–æ—Ç–∞", 
                    subscribers: 87000,
                    er: 7.2,
                    price: 1800,
                    email: "anna@example.com",
                    avatar: "../images/avatars/placeholder.png"
                },
                {
                    id: "3",
                    name: "–°–µ—Ä–≥–µ–π –ö–æ–∑–ª–æ–≤", 
                    platform: "YouTube",
                    category: "–∏–≥—Ä—ã",
                    subscribers: 356000,
                    er: 3.8,
                    price: 4200,
                    email: "sergey@example.com",
                    avatar: "../images/avatars/placeholder.png"
                },
                {
                    id: "4",
                    name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
                    platform: "TikTok",
                    category: "–º–æ–¥–∞",
                    subscribers: 210000,
                    er: 8.1,
                    price: 1900,
                    email: "maria@example.com",
                    avatar: "../images/avatars/placeholder.png"
                },
                {
                    id: "5",
                    name: "–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤",
                    platform: "Telegram",
                    category: "–Ω–æ–≤–æ—Å—Ç–∏",
                    subscribers: 45000,
                    er: 5.5,
                    price: 1200,
                    email: "dmitry@example.com",
                    avatar: "../images/avatars/placeholder.png"
                },
                {
                    id: "6",
                    name: "–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞",
                    platform: "YouTube",
                    category: "–∫—É–ª–∏–Ω–∞—Ä–∏—è",
                    subscribers: 98000,
                    er: 6.2,
                    price: 1600,
                    email: "olga@example.com",
                    avatar: "../images/avatars/placeholder.png"
                }
            ];
            console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ");
            return allBloggers;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    window.initPickStep = async function() {
        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–≥–∞ –ø–æ–¥–±–æ—Ä–∞");
        
        await loadBloggers();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
        try {
            const saved = readPicked();
            selected = new Set(saved.map(String));
            console.log(`üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${selected.size} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤`);
        } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞:', e);
        }

        initFilterListeners();
        applyFilters();
        
        console.log("‚úÖ –®–∞–≥ 1 –≥–æ—Ç–æ–≤");
        document.dispatchEvent(new CustomEvent('filters:ready'));
    };

    function initFilterListeners() {
        console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤");

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const filterInputs = ['fPlatform', 'followersMinK', 'followersMaxK', 'fCategory', 'fQuery'];
        
        filterInputs.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('input', applyFilters);
                element.addEventListener('change', applyFilters);
            }
        });

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        $('#selectAll')?.addEventListener('click', selectAllFiltered);
        $('#clearPicked')?.addEventListener('click', clearSelected);
        $('#clearFilters')?.addEventListener('click', clearAllFilters);
    }

    function applyFilters() {
        let filtered = [...allBloggers];
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const platform = $('#fPlatform')?.value || '';
        const minFollowers = $('#followersMinK')?.value || '';
        const maxFollowers = $('#followersMaxK')?.value || '';
        const category = $('#fCategory')?.value || '';
        const query = $('#fQuery')?.value || '';

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        if (platform) {
            filtered = filtered.filter(b => b.platform === platform);
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        if (minFollowers) {
            const min = parseInt(minFollowers) * 1000;
            filtered = filtered.filter(b => b.subscribers >= min);
        }
        
        if (maxFollowers) {
            const max = parseInt(maxFollowers) * 1000;
            filtered = filtered.filter(b => b.subscribers <= max);
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (category) {
            const categoryLower = category.toLowerCase();
            filtered = filtered.filter(b => 
                b.category && b.category.toLowerCase().includes(categoryLower)
            );
        }

        // –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if (query) {
            const queryLower = query.toLowerCase();
            filtered = filtered.filter(b => 
                b.name.toLowerCase().includes(queryLower) ||
                (b.category && b.category.toLowerCase().includes(queryLower)) ||
                b.platform.toLowerCase().includes(queryLower)
            );
        }

        renderResults(filtered);
        updateChips();
    }

    function renderResults(bloggers) {
        const resultsList = $('#resultsList');
        if (!resultsList) return;
        
        if (bloggers.length === 0) {
            resultsList.innerHTML = '<li class="muted">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.</li>';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if ($('#resultsCount')) $('#resultsCount').textContent = '0';
            if ($('#pickedCount')) $('#pickedCount').textContent = selected.size;
            
            return;
        }
        
        resultsList.innerHTML = bloggers.map(blogger => `
            <li class="card-blogger" data-id="${blogger.id}">
                <div class="avatar">${blogger.name.charAt(0)}</div>
                <div>
                    <div class="name"><strong>${blogger.name}</strong></div>
                    <div class="meta">
                        <span class="badge">${blogger.platform || '‚Äî'}</span>
                        <span class="badge">${blogger.category || '‚Äî'}</span>
                    </div>
                    <div class="meta">
                        –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${(blogger.subscribers / 1000).toFixed(0)}K ¬∑ 
                        ER: ${blogger.er || 'N/A'}% ¬∑ 
                        –¶–µ–Ω–∞: ${blogger.price || '‚Äî'}$
                    </div>
                    <div class="actions">
                        <label class="select-radio">
                            <input type="checkbox" class="pick" 
                                   data-id="${blogger.id}" 
                                   ${selected.has(String(blogger.id)) ? 'checked' : ''}>
                            –í –≤—ã–±–æ—Ä–∫—É
                        </label>
                    </div>
                </div>
            </li>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if ($('#resultsCount')) $('#resultsCount').textContent = bloggers.length;
        if ($('#pickedCount')) $('#pickedCount').textContent = selected.size;

        // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ —á–µ–∫–±–æ–∫—Å—ã
        resultsList.querySelectorAll('.pick').forEach(checkbox => {
            checkbox.addEventListener('change', handleSelection);
        });
    }

    function handleSelection(e) {
        const id = e.target.dataset.id;
        const card = e.target.closest('.card-blogger');
        
        if (e.target.checked) {
            selected.add(id);
            card.classList.add('selected');
        } else {
            selected.delete(id);
            card.classList.remove('selected');
        }
        
        writePicked([...selected]);
        if ($('#pickedCount')) $('#pickedCount').textContent = selected.size;
    }

    function selectAllFiltered() {
        const visibleCards = $('#resultsList').querySelectorAll('.card-blogger');
        const visibleIds = Array.from(visibleCards).map(card => card.dataset.id);
        
        visibleIds.forEach(id => {
            if (!selected.has(id)) {
                selected.add(id);
            }
        });
        
        writePicked([...selected]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        visibleCards.forEach(card => {
            card.classList.add('selected');
            const checkbox = card.querySelector('.pick');
            if (checkbox) checkbox.checked = true;
        });
        
        if ($('#pickedCount')) $('#pickedCount').textContent = selected.size;
    }

    function clearSelected() {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        $('#resultsList').querySelectorAll('.card-blogger').forEach(card => {
            card.classList.remove('selected');
            const checkbox = card.querySelector('.pick');
            if (checkbox) checkbox.checked = false;
        });
        
        selected.clear();
        writePicked([]);
        if ($('#pickedCount')) $('#pickedCount').textContent = '0';
    }

    function clearAllFilters() {
        // –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π
        const fieldsToClear = ['fPlatform', 'followersMinK', 'followersMaxK', 'fCategory', 'fQuery'];
        
        fieldsToClear.forEach(id => {
            const element = document.getElementById(id);
            if (element) element.value = '';
        });
        
        currentFilters = {};
        applyFilters();
    }

    function updateChips() {
        const chips = $('#activeChips');
        if (!chips) return;
        
        const activeFilters = [];
        const platform = $('#fPlatform')?.value;
        const minFollowers = $('#followersMinK')?.value;
        const maxFollowers = $('#followersMaxK')?.value;
        const category = $('#fCategory')?.value;
        const query = $('#fQuery')?.value;

        if (platform) {
            activeFilters.push(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}`);
        }
        
        if (minFollowers) {
            activeFilters.push(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ—Ç: ${minFollowers}K`);
        }
        
        if (maxFollowers) {
            activeFilters.push(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–æ: ${maxFollowers}K`);
        }
        
        if (category) {
            activeFilters.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
        }
        
        if (query) {
            activeFilters.push(`–ü–æ–∏—Å–∫: ${query}`);
        }

        chips.innerHTML = activeFilters.map(filter => 
            `<span class="chip-filter">${filter}<button type="button">√ó</button></span>`
        ).join('') || '<span class="muted">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤</span>';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è —á–∏–ø–æ–≤
        chips.querySelectorAll('.chip-filter button').forEach((button, index) => {
            button.addEventListener('click', function() {
                const filterType = activeFilters[index].split(':')[0].trim();
                
                switch(filterType) {
                    case '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞':
                        $('#fPlatform').value = '';
                        break;
                    case '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ—Ç':
                        $('#followersMinK').value = '';
                        break;
                    case '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–æ':
                        $('#followersMaxK').value = '';
                        break;
                    case '–ö–∞—Ç–µ–≥–æ—Ä–∏—è':
                        $('#fCategory').value = '';
                        break;
                    case '–ü–æ–∏—Å–∫':
                        $('#fQuery').value = '';
                        break;
                }
                
                applyFilters();
            });
        });
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö)
    window.toggleBloggerSelection = function(bloggerId) {
        const blogger = allBloggers.find(b => b.id === bloggerId);
        if (!blogger) return;
        
        const id = String(bloggerId);
        
        if (selected.has(id)) {
            selected.delete(id);
        } else {
            selected.add(id);
        }
        
        writePicked([...selected]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const card = $(`.card-blogger[data-id="${bloggerId}"]`);
        if (card) {
            card.classList.toggle('selected');
            const checkbox = card.querySelector('.pick');
            if (checkbox) checkbox.checked = selected.has(id);
        }
        
        if ($('#pickedCount')) $('#pickedCount').textContent = selected.size;
    };

})();